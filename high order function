## **🚀 Higher Order Functions (توابع مرتبه بالاتر) در React و جاوا اسکریپت**  

### **✅ توابع مرتبه بالاتر (HOF) چیست؟**  
**Higher Order Functions (HOF)** توابعی هستند که **یا یک تابع دیگر را به عنوان ورودی دریافت می‌کنند، یا یک تابع دیگر را به عنوان خروجی برمی‌گردانند، یا هر دو کار را انجام می‌دهند.**  

🔹 **چرا مهم هستند؟**  
- **کدنویسی تمیزتر و قابل‌ استفاده مجدد**  
- **افزایش قابلیت خوانایی و تست‌پذیری**  
- **استفاده زیاد در React (مثلاً در HOCs و Hooks)**  

---

## **✅ مثال از توابع مرتبه بالاتر در جاوا اسکریپت**
### **۱. تابعی که یک تابع را به عنوان ورودی می‌گیرد**
```js
function applyFunction(func, value) {
    return func(value);
}

const double = (num) => num * 2;
console.log(applyFunction(double, 5)); // 10
```
🔹 `applyFunction` یک تابع است که یک **تابع دیگر (`double`) را به عنوان ورودی دریافت می‌کند.**  

---

### **۲. تابعی که یک تابع را برمی‌گرداند**
```js
function createMultiplier(multiplier) {
    return function (num) {
        return num * multiplier;
    };
}

const double = createMultiplier(2);
console.log(double(5)); // 10
```
🔹 `createMultiplier(2)` یک تابع جدید ایجاد می‌کند که هر عددی را دو برابر می‌کند.

---

## **✅ توابع مرتبه بالاتر در React (HOC)**
در **React**، Higher Order Functions در قالب **Higher Order Components (HOC)** و **Custom Hooks** استفاده می‌شوند.  

### **۱. Higher Order Components (HOC) در React**
🔹 **HOC یک تابعی است که یک کامپوننت را می‌گیرد و یک کامپوننت جدید بازمی‌گرداند.**  

🔹 **مثال HOC برای احراز هویت در React:**  
```jsx
import React from "react";

function withAuth(Component) {
    return function AuthenticatedComponent(props) {
        const isAuthenticated = true; // فرض کنیم کاربر لاگین کرده
        return isAuthenticated ? <Component {...props} /> : <p>لطفاً وارد شوید</p>;
    };
}

const Dashboard = () => <h2>داشبورد</h2>;

const ProtectedDashboard = withAuth(Dashboard);

export default ProtectedDashboard;
```
✔️ در اینجا **`withAuth` یک HOC است که `Dashboard` را می‌گیرد و نسخه محافظت‌شده‌ای از آن را برمی‌گرداند.**

---

### **۲. استفاده از Higher Order Functions در Hooks (Custom Hooks)**
🔹 می‌توان از HOF برای ساخت **Hooks سفارشی (Custom Hooks)** استفاده کرد.  

🔹 **مثال: یک `useLogger` که مقدار هر تغییر را لاگ می‌کند:**  
```jsx
import { useEffect } from "react";

function useLogger(value) {
    useEffect(() => {
        console.log("Value changed:", value);
    }, [value]);
}

export default useLogger;
```
🔹 استفاده در یک کامپوننت:
```jsx
import React, { useState } from "react";
import useLogger from "./useLogger";

function Counter() {
    const [count, setCount] = useState(0);
    useLogger(count); // مقدار هر تغییر در `count` را لاگ می‌کند

    return <button onClick={() => setCount(count + 1)}>Click Me {count}</button>;
}

export default Counter;
```
✔️ **تابع `useLogger` یک HOF است که قابلیت لاگ گرفتن را به هر مقدار دلخواه اضافه می‌کند.**

---

## **🚀 جمع‌بندی**
| ویژگی | **Higher Order Function (HOF)** | **Higher Order Component (HOC)** |
|--------|-------------------------------|-------------------------------|
| تعریف | تابعی که تابع دیگر را می‌گیرد یا برمی‌گرداند | تابعی که یک **کامپوننت** را گرفته و یک **کامپوننت جدید** برمی‌گرداند |
| استفاده | `map()`, `filter()`, `reduce()`, `createMultiplier()` | `withAuth()`, `withTheme()` |
| کاربرد | پردازش آرایه، ایجاد تابع داینامیک | احراز هویت، مدیریت استایل، کش کردن داده‌ها |

✅ **توابع مرتبه بالاتر بخش مهمی از برنامه‌نویسی فانکشنال در جاوا اسکریپت و React هستند و برای ساخت کامپوننت‌های قابل استفاده مجدد به کار می‌روند.**  

